#ifndef _CHARACTER_H
#define _CHARACTER_H

#include <string>

enum eCharacteristic {
	INTELLIGENCE,
	PERCEPTION,
	STRENGTH,
	STAMINA,
	PRESENCE,
	COMMUNICATION,
	DEXTERITY,
	QUICKNESS,

	MAX_CHARACTERISTICS
};


enum eVirtueCategory {
	ZERO_VIRTUE_CATEGORY,

	STATUS_VIRTUE_CATEGORY,
	PHYSICAL_VIRTUE_CATEGORY,
	TRAITS_VIRTUE_CATEGORY,
	STATS_VIRTUE_CATEGORY,
	SOCIAL_VIRTUE_CATEGORY,

	MAX_VIRTUE_CATEGORIES
};

struct Virtue {
	int value;
	eVirtueCategory category;
};


enum eVirtueFlaw {
	WANDERER,
	COVENFOLK,
	FREEMAN,
	FAILED_APPRENTICE,
	MENDICANT,
	PETTY_MERCHANT,
	WISE_ONE,
	PROSPEROUS_PEASANT,
	KNIGHT_ERRANT,
	LESSER_NOBLE,
	MERCENARY,
	MAGISTER_IN_ARTIBUS,
	PRIEST,
	WEALTHY_MERCHANT,
	LANDED_KNIGHT,
	BRANDED_CRIMINAL,
	OUTCAST,
	OUTLAW_LEADER,
	INFAMOUS_OUTLAW,
		
	ENDURING_CONSTITUTION,
	LARGE,
	LONG_WINDED,
	RAPID_CONVALESCENCE,
	TOUGH,
	GIANT_BLOOD,
	DISFIGURED,
	EVIL_EYE,
	FRAGILE_CONSTITUTION,
	MISSING_EAR,
	MISSING_EYE,
	OBESE,
	CLUMSY,
	DECREPIT,
	HUNCHBACK,
	LAME,
	MISSING_HAND,
	SMALL_FRAME,
	ARTHRITIS,
	MUTE,
	DWARF,
	AGE_QUICKLY,
	BLIND,
	ENFEEBLED,

	AMBIDEXTROUS,
	CAREFREE,
	CLEAR_THINKER,
	FREE_EXPRESSION,
	INSPIRATIONAL,
	KEEN_VISION,
	LIGHT_SLEEPER,
	MAGIC_RESISTANCE,
	PERFECT_BALANCE,
	PIERCING_GAZE,
	SHARP_EARS,
	STRONG_WILLED,
	TROUPE_UPBRINGING,
	VENUS_BLESSING,
	WELL_TRAVELED,
	WITHSTANDING_MAGIC,
	LIGHTNING_REFLEXES,
	LIGHT_TOUCH,
	WAYS_OF_THE_LAND,
	DEEP_SLEEPER,
	MAGICAL_AIR,
	MAGIC_SUSPECTIBILITY,
	POOR_EYESIGHT,
	POOR_HEARING,
	WEAK_WILLED,
	NONCOMBATANT,

	BOOK_LEARNER,
	EDUCATED,
	FURTHER_EDUCATION,
	LOW_SELFESTEEM,
	SELF_CONFIDENT,
	VETERAN,
	GREAT_CHARACTERISTIC_INTELLIGENCE,
	GREAT_CHARACTERISTIC_PERCEPTION,
	GREAT_CHARACTERISTIC_STRENGTH,
	GREAT_CHARACTERISTIC_STAMINA,
	GREAT_CHARACTERISTIC_PRESENCE,
	GREAT_CHARACTERISTIC_COMMUNICATION,
	GREAT_CHARACTERISTIC_DEXTERITY,
	GREAT_CHARACTERISTIC_QUICKNESS,

	JACK_OF_ALL_TRADES,
	TRAINING,
	FAST_LEARNER,
	HIGHLY_TRAINED,
	INCREDIBLE_CHARACTERISTIC_INTELLIGENCE,
	INCREDIBLE_CHARACTERISTIC_PERCEPTION,
	INCREDIBLE_CHARACTERISTIC_STRENGTH,
	INCREDIBLE_CHARACTERISTIC_STAMINA,
	INCREDIBLE_CHARACTERISTIC_PRESENCE,
	INCREDIBLE_CHARACTERISTIC_COMMUNICATION,
	INCREDIBLE_CHARACTERISTIC_DEXTERITY,
	INCREDIBLE_CHARACTERISTIC_QUICKNESS,
	MYTHIC_CHARACTERISTIC_INTELLIGENCE,
	MYTHIC_CHARACTERISTIC_PERCEPTION,
	MYTHIC_CHARACTERISTIC_STRENGTH,
	MYTHIC_CHARACTERISTIC_STAMINA,
	MYTHIC_CHARACTERISTIC_PRESENCE,
	MYTHIC_CHARACTERISTIC_COMMUNICATION,
	MYTHIC_CHARACTERISTIC_DEXTERITY,
	MYTHIC_CHARACTERISTIC_QUICKNESS,
	SHORT_ATTENTION_SPAN,
	POOR_CHARACTERISTIC_INTELLIGENCE,
	POOR_CHARACTERISTIC_PERCEPTION,
	POOR_CHARACTERISTIC_STRENGTH,
	POOR_CHARACTERISTIC_STAMINA,
	POOR_CHARACTERISTIC_PRESENCE,
	POOR_CHARACTERISTIC_COMMUNICATION,
	POOR_CHARACTERISTIC_DEXTERITY,
	POOR_CHARACTERISTIC_QUICKNESS,
	FEEBLE_CHARACTERISTIC_INTELLIGENCE,
	FEEBLE_CHARACTERISTIC_PERCEPTION,
	FEEBLE_CHARACTERISTIC_STRENGTH,
	FEEBLE_CHARACTERISTIC_STAMINA,
	FEEBLE_CHARACTERISTIC_PRESENCE,
	FEEBLE_CHARACTERISTIC_COMMUNCATION,
	FEEBLE_CHARACTERISTIC_DEXTERITY,
	FEEBLE_CHARACTERISTIC_QUICKNESS,
	PATHETIC_CHARACTERISTIC_INTELLIGENCE,
	PATHETIC_CHARACTERISTIC_PERCEPTION,
	PATHETIC_CHARACTERISTIC_STRENGTH,
	PATHETIC_CHARACTERISTIC_STAMINA,
	PATHETIC_CHARACTERISTIC_PRESENCE,
	PATHETIC_CHARACTERISTIC_COMMUNICATION,
	PATHETIC_CHARACTERISTIC_DEXTERITY,
	PATHETIC_CHARACTERISTIC_QUICKNESS,

	MAX_VIRTUESFLAWS
};

class Character {
	public:
		Character(std::string name, int* characteristics, bool* virtuesflaws);
		~Character();

		static eCharacteristic getCharacteristicId(const std::string characteristic_name);
		static eVirtueFlaw getVirtueflawId(const std::string virtueflaw_name);
		
		static std::string characteristicIdentifier[MAX_CHARACTERISTICS];
		static std::string characteristicLabel[MAX_CHARACTERISTICS];

		static std::string characteristicTooltip[MAX_CHARACTERISTICS];
		static std::string characteristicValueDescription[13];
		static std::string characteristicValueTooltip[MAX_CHARACTERISTICS][13];
		static Virtue virtueData[MAX_VIRTUESFLAWS];

		static std::string virtueflawIdentifier[MAX_VIRTUESFLAWS];
		static std::string virtueflawLabel[MAX_VIRTUESFLAWS];

//		static std::string virtueflawTooltip[MAX_VIRTUESFLAWS];
		static const bool loadVirtuesFlawsFile();
		static void loadStringFiles();
		static void initStatic();
	private:
		int characteristic[MAX_CHARACTERISTICS];
		bool virtueflaw[MAX_VIRTUESFLAWS];
		std::string name;

};

#endif